************** ONE TIME ACTIVIT ***********************************
Start a Server
Make redis ready: https://github.com/ankitforcodes/redis/blob/main/installing_correctly.txt
  
***********************************************************************************
Once the above is done for all 3 servers
* make 6 redis.conf files with different ports
* Ideally these would be running in 6 different 

Setup is ready at : 
  /Ankit/redis_installation/redis-stable/cluster-test
  
  Just delete all the rdb and cluster conf files, keep only redis.conf file


In each redis.conf file:
port 7000
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no


port 7001
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no

port 7002
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no

port 7003
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no

port 7004
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no

port 7005
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no
  
* Start all redis instances BY GOING INSIDE INDIVIDUAL DIRECTORIES : Dont run from outside the directory
  becuase nodes.conf file gets generated in the current path
  If we use common path - node.conf will clash
  cd 7000
  redis-server 7000.conf
  
  cd 7001
  redis-server 7001.conf
  
  cd 7002
  redis-server 7002.conf
  
  
  cd 7003
  redis-server 7003.conf
  
  
  
  cd 7004
  redis-server 7004.conf
  
  
  cd 7005
  redis-server 7005.conf
  
  Note the their mode is: CLuster Mode
  
  ALL NODES ARE RUNNING IN CLUSTER MODE NOW - BUT NOT TALKING TO EACH OTHER
***********************************************************************************

Start another shell on any one node and run:
CONNECT TO ANY 1 NODE:
NOTE that port is now 7000 70001 etc - dont try to connect to 6379


redis-cli -h 127.0.0.1 -p 7000 --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 --cluster-replicas 1



Notice the following sentences:
Master[0] -> Slots 0 - 5460
Master[1] -> Slots 5461 - 10922
Master[2] -> Slots 10923 - 16383


Adding replica X:6379 to X:6379
Adding replica X:6380 to X:6379
Adding replica X:6380 to X:6380

If you see OK message, you cluster setup is ready
***************************************************************************************

Connect to any redis-instance via redis-cli and to check its role:
redis-cli -c -h 127.0.0.1 -p 7000

-c flag is important - it tells the cli we want to connect to a server which is part of a cluster

* Connect to different PORTs and check their ROLE
  ROLE REPLICATION
  
* Connect to one of the SLAVE nodes and try to set a key
  - EVEN slave nodes are able to redirect SET commands to MASTER
  
  
* set multiple keys to send to different HASHSLOTS
  set name1 A
  set name2 B
  set name3 C
  
  Once it goes to different hashslots, try to do a multikey operation
  MGET name1 name2 name3
    - if its in different HASHSLOTs - it will throw an error
    
    
* If you want to force keys to go to same hashslots/server - use hashtags
  set {project1}:cust1:name Ankit
  set {project1}:cust1:location chennai
  set {project1}:cust1:role developer
  
  
  Only the string inside {} will used to hash, and thus goes to same slot always
  
* Confirm which is master and which is slave (WE ARE GOING TO BRING DOWN A MASTER):
    Connect to any of the server using redis-cli
    redis-cli -h 127.0.0.1 -p 7000
    
    cluster nodes:
      cb81a1753b6188017d78bcccc10ec23444bf1be3 127.0.0.1:7000@17000 master - 0 1661192796000 1 connected 0-5460
      9e833d7a31fbfd2b6b5d43273707d14a055c735d 127.0.0.1:7002@17002 master - 0 1661192795547 3 connected 10923-16383
      ee7de7fd07a4ab22638a1fd1f0becda0c6d5e4b3 127.0.0.1:7004@17004 slave 9e833d7a31fbfd2b6b5d43273707d14a055c735d 0 1661192795547 3 connected
      1d977a11fe5902966d42c4acf1e6dd4cf4eef921 127.0.0.1:7003@17003 slave e4055c20f883c817f0b32f3697d3389acad8248e 0 1661192796552 2 connected
      c2175082b59325fa10f78ec612e3ec8661fcc665 127.0.0.1:7005@17005 slave cb81a1753b6188017d78bcccc10ec23444bf1be3 0 1661192796000 1 connected
      e4055c20f883c817f0b32f3697d3389acad8248e 127.0.0.1:7001@17001 myself,master - 0 1661192796000 2 connected 5461-10922
      
      
   7001 is a master, connect to it and run SHUTDOWN
    
    
    NOte the logs, how cluster becomes NOT OK for a while then becomes OK
    
   Bring 7001 back up - notice its role when it joins backs, it joins back as SLAVE





set name Ankit
Redirected to slot [5798] located at 157.245.112.53:7001


Notice how getting and setting from one redis-instance is able to get the hashslot and find the key from any servers
Even slaves are able to accept write commands and redirect to masters (which was not allowed in replication without cluster)
